#! /usr/bin/env node
/* eslint-disable no-console */

var Q = require('q');
var _ = require('lodash');
var program = require('commander');
var parsedArgv = require('optimist').argv;
var color = require('bash-color');

var gitbook = require('../lib/');

// Helper function for print help
// indented output by spaces
function indent_output(n, name, description) {
    if (!n) {
        n = 0;
    }

    console.log(
        _.repeat('    ', n)
        + name
        + _.repeat(' ', 32 - n * 4 - name.length)
        + description
    );
}

// Print help for a list of commands
// It prints the command and its description, then all the options
function help(commands) {
    _.each(commands, function(command) {
        indent_output(1, command.name, command.description);
        _.each(command.options || [], function(option) {
            var after = [];

            if (option.defaults !== undefined) after.push('Default is '+option.defaults);
            if (option.values) after.push('Values are '+option.values.join(', '));

            if (after.length > 0) after = '('+after.join('; ')+')';
            else after = '';

            var optname = '--';
            if (typeof option.defaults === 'boolean') optname += '[no-]';
            optname += option.name;
            indent_output(2, optname, option.description + ' ' + after);
        });
        console.log('');
    });
}

// Execute a command from a list
// with a specific set of args/kwargs
function exec(commands, command, args, kwargs) {
    var cmd = _.find(commands, function(_cmd) {
        return _.first(_cmd.name.split(' ')) == command;
    });

    // Command not found
    if (!cmd) throw new Error('Command '+command+' doesn\'t exist, run "gitbook help" to list commands.');

    // Apply defaults
    _.each(cmd.options || [], function(option) {
        kwargs[option.name] = (kwargs[option.name] === undefined)? option.defaults : kwargs[option.name];
        if (option.values && !_.includes(option.values, kwargs[option.name])) {
            throw new Error('Invalid value for option "'+option.name+'"');
        }
    });

    return cmd.exec(args, kwargs);
}

function runPromise(p) {
    return p
    .then(function() {
        process.exit(0);
    }, function(err) {
        console.log('');
        console.log(color.red(err.toString()));
        if (program.debug || process.env.DEBUG) console.log(err.stack || '');
        process.exit(1);
    });
}

program
    .option('-d, --debug', 'enable verbose error');

program
    .command('help')
    .description('List commands for GitBook')
    .action(function(){
        runPromise(
            Q().then(help(gitbook.commands))
        );
    });

program
    .command('*')
    .description('run a command with a specific gitbook version')
    .action(function(commandName){
        var args = parsedArgv._.slice(1);
        var kwargs = _.omit(parsedArgv, '$0', '_');

        runPromise(
            exec(gitbook.commands, commandName, args, kwargs)
        );
    });

// Parse and fallback to help if no args
if(_.isEmpty(program.parse(process.argv).args) && process.argv.length === 2) {
    program.help();
}
